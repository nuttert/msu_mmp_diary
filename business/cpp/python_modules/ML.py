# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ML
else:
    import _ML

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ML.delete_SwigPyIterator

    def value(self):
        return _ML.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ML.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ML.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ML.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ML.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ML.SwigPyIterator_copy(self)

    def next(self):
        return _ML.SwigPyIterator_next(self)

    def __next__(self):
        return _ML.SwigPyIterator___next__(self)

    def previous(self):
        return _ML.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ML.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ML.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ML.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ML.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ML.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ML.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ML.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ML:
_ML.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ML.SHARED_PTR_DISOWN
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.IntVector___nonzero__(self)

    def __bool__(self):
        return _ML.IntVector___bool__(self)

    def __len__(self):
        return _ML.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _ML.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.IntVector___setitem__(self, *args)

    def pop(self):
        return _ML.IntVector_pop(self)

    def append(self, x):
        return _ML.IntVector_append(self, x)

    def empty(self):
        return _ML.IntVector_empty(self)

    def size(self):
        return _ML.IntVector_size(self)

    def swap(self, v):
        return _ML.IntVector_swap(self, v)

    def begin(self):
        return _ML.IntVector_begin(self)

    def end(self):
        return _ML.IntVector_end(self)

    def rbegin(self):
        return _ML.IntVector_rbegin(self)

    def rend(self):
        return _ML.IntVector_rend(self)

    def clear(self):
        return _ML.IntVector_clear(self)

    def get_allocator(self):
        return _ML.IntVector_get_allocator(self)

    def pop_back(self):
        return _ML.IntVector_pop_back(self)

    def erase(self, *args):
        return _ML.IntVector_erase(self, *args)

    def __init__(self, *args):
        _ML.IntVector_swiginit(self, _ML.new_IntVector(*args))

    def push_back(self, x):
        return _ML.IntVector_push_back(self, x)

    def front(self):
        return _ML.IntVector_front(self)

    def back(self):
        return _ML.IntVector_back(self)

    def assign(self, n, x):
        return _ML.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _ML.IntVector_resize(self, *args)

    def insert(self, *args):
        return _ML.IntVector_insert(self, *args)

    def reserve(self, n):
        return _ML.IntVector_reserve(self, n)

    def capacity(self):
        return _ML.IntVector_capacity(self)
    __swig_destroy__ = _ML.delete_IntVector

# Register IntVector in _ML:
_ML.IntVector_swigregister(IntVector)

class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.vectord___nonzero__(self)

    def __bool__(self):
        return _ML.vectord___bool__(self)

    def __len__(self):
        return _ML.vectord___len__(self)

    def __getslice__(self, i, j):
        return _ML.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.vectord___setitem__(self, *args)

    def pop(self):
        return _ML.vectord_pop(self)

    def append(self, x):
        return _ML.vectord_append(self, x)

    def empty(self):
        return _ML.vectord_empty(self)

    def size(self):
        return _ML.vectord_size(self)

    def swap(self, v):
        return _ML.vectord_swap(self, v)

    def begin(self):
        return _ML.vectord_begin(self)

    def end(self):
        return _ML.vectord_end(self)

    def rbegin(self):
        return _ML.vectord_rbegin(self)

    def rend(self):
        return _ML.vectord_rend(self)

    def clear(self):
        return _ML.vectord_clear(self)

    def get_allocator(self):
        return _ML.vectord_get_allocator(self)

    def pop_back(self):
        return _ML.vectord_pop_back(self)

    def erase(self, *args):
        return _ML.vectord_erase(self, *args)

    def __init__(self, *args):
        _ML.vectord_swiginit(self, _ML.new_vectord(*args))

    def push_back(self, x):
        return _ML.vectord_push_back(self, x)

    def front(self):
        return _ML.vectord_front(self)

    def back(self):
        return _ML.vectord_back(self)

    def assign(self, n, x):
        return _ML.vectord_assign(self, n, x)

    def resize(self, *args):
        return _ML.vectord_resize(self, *args)

    def insert(self, *args):
        return _ML.vectord_insert(self, *args)

    def reserve(self, n):
        return _ML.vectord_reserve(self, n)

    def capacity(self):
        return _ML.vectord_capacity(self)
    __swig_destroy__ = _ML.delete_vectord

# Register vectord in _ML:
_ML.vectord_swigregister(vectord)

class ElementVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.ElementVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.ElementVector___nonzero__(self)

    def __bool__(self):
        return _ML.ElementVector___bool__(self)

    def __len__(self):
        return _ML.ElementVector___len__(self)

    def __getslice__(self, i, j):
        return _ML.ElementVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.ElementVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.ElementVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.ElementVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.ElementVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.ElementVector___setitem__(self, *args)

    def pop(self):
        return _ML.ElementVector_pop(self)

    def append(self, x):
        return _ML.ElementVector_append(self, x)

    def empty(self):
        return _ML.ElementVector_empty(self)

    def size(self):
        return _ML.ElementVector_size(self)

    def swap(self, v):
        return _ML.ElementVector_swap(self, v)

    def begin(self):
        return _ML.ElementVector_begin(self)

    def end(self):
        return _ML.ElementVector_end(self)

    def rbegin(self):
        return _ML.ElementVector_rbegin(self)

    def rend(self):
        return _ML.ElementVector_rend(self)

    def clear(self):
        return _ML.ElementVector_clear(self)

    def get_allocator(self):
        return _ML.ElementVector_get_allocator(self)

    def pop_back(self):
        return _ML.ElementVector_pop_back(self)

    def erase(self, *args):
        return _ML.ElementVector_erase(self, *args)

    def __init__(self, *args):
        _ML.ElementVector_swiginit(self, _ML.new_ElementVector(*args))

    def push_back(self, x):
        return _ML.ElementVector_push_back(self, x)

    def front(self):
        return _ML.ElementVector_front(self)

    def back(self):
        return _ML.ElementVector_back(self)

    def assign(self, n, x):
        return _ML.ElementVector_assign(self, n, x)

    def resize(self, *args):
        return _ML.ElementVector_resize(self, *args)

    def insert(self, *args):
        return _ML.ElementVector_insert(self, *args)

    def reserve(self, n):
        return _ML.ElementVector_reserve(self, n)

    def capacity(self):
        return _ML.ElementVector_capacity(self)
    __swig_destroy__ = _ML.delete_ElementVector

# Register ElementVector in _ML:
_ML.ElementVector_swigregister(ElementVector)

class TrainElementVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.TrainElementVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.TrainElementVector___nonzero__(self)

    def __bool__(self):
        return _ML.TrainElementVector___bool__(self)

    def __len__(self):
        return _ML.TrainElementVector___len__(self)

    def __getslice__(self, i, j):
        return _ML.TrainElementVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.TrainElementVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.TrainElementVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.TrainElementVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.TrainElementVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.TrainElementVector___setitem__(self, *args)

    def pop(self):
        return _ML.TrainElementVector_pop(self)

    def append(self, x):
        return _ML.TrainElementVector_append(self, x)

    def empty(self):
        return _ML.TrainElementVector_empty(self)

    def size(self):
        return _ML.TrainElementVector_size(self)

    def swap(self, v):
        return _ML.TrainElementVector_swap(self, v)

    def begin(self):
        return _ML.TrainElementVector_begin(self)

    def end(self):
        return _ML.TrainElementVector_end(self)

    def rbegin(self):
        return _ML.TrainElementVector_rbegin(self)

    def rend(self):
        return _ML.TrainElementVector_rend(self)

    def clear(self):
        return _ML.TrainElementVector_clear(self)

    def get_allocator(self):
        return _ML.TrainElementVector_get_allocator(self)

    def pop_back(self):
        return _ML.TrainElementVector_pop_back(self)

    def erase(self, *args):
        return _ML.TrainElementVector_erase(self, *args)

    def __init__(self, *args):
        _ML.TrainElementVector_swiginit(self, _ML.new_TrainElementVector(*args))

    def push_back(self, x):
        return _ML.TrainElementVector_push_back(self, x)

    def front(self):
        return _ML.TrainElementVector_front(self)

    def back(self):
        return _ML.TrainElementVector_back(self)

    def assign(self, n, x):
        return _ML.TrainElementVector_assign(self, n, x)

    def resize(self, *args):
        return _ML.TrainElementVector_resize(self, *args)

    def insert(self, *args):
        return _ML.TrainElementVector_insert(self, *args)

    def reserve(self, n):
        return _ML.TrainElementVector_reserve(self, n)

    def capacity(self):
        return _ML.TrainElementVector_capacity(self)
    __swig_destroy__ = _ML.delete_TrainElementVector

# Register TrainElementVector in _ML:
_ML.TrainElementVector_swigregister(TrainElementVector)

class TestElementVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.TestElementVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.TestElementVector___nonzero__(self)

    def __bool__(self):
        return _ML.TestElementVector___bool__(self)

    def __len__(self):
        return _ML.TestElementVector___len__(self)

    def __getslice__(self, i, j):
        return _ML.TestElementVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.TestElementVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.TestElementVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.TestElementVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.TestElementVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.TestElementVector___setitem__(self, *args)

    def pop(self):
        return _ML.TestElementVector_pop(self)

    def append(self, x):
        return _ML.TestElementVector_append(self, x)

    def empty(self):
        return _ML.TestElementVector_empty(self)

    def size(self):
        return _ML.TestElementVector_size(self)

    def swap(self, v):
        return _ML.TestElementVector_swap(self, v)

    def begin(self):
        return _ML.TestElementVector_begin(self)

    def end(self):
        return _ML.TestElementVector_end(self)

    def rbegin(self):
        return _ML.TestElementVector_rbegin(self)

    def rend(self):
        return _ML.TestElementVector_rend(self)

    def clear(self):
        return _ML.TestElementVector_clear(self)

    def get_allocator(self):
        return _ML.TestElementVector_get_allocator(self)

    def pop_back(self):
        return _ML.TestElementVector_pop_back(self)

    def erase(self, *args):
        return _ML.TestElementVector_erase(self, *args)

    def __init__(self, *args):
        _ML.TestElementVector_swiginit(self, _ML.new_TestElementVector(*args))

    def push_back(self, x):
        return _ML.TestElementVector_push_back(self, x)

    def front(self):
        return _ML.TestElementVector_front(self)

    def back(self):
        return _ML.TestElementVector_back(self)

    def assign(self, n, x):
        return _ML.TestElementVector_assign(self, n, x)

    def resize(self, *args):
        return _ML.TestElementVector_resize(self, *args)

    def insert(self, *args):
        return _ML.TestElementVector_insert(self, *args)

    def reserve(self, n):
        return _ML.TestElementVector_reserve(self, n)

    def capacity(self):
        return _ML.TestElementVector_capacity(self)
    __swig_destroy__ = _ML.delete_TestElementVector

# Register TestElementVector in _ML:
_ML.TestElementVector_swigregister(TestElementVector)

class ClassDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    distance = property(_ML.ClassDistance_distance_get, _ML.ClassDistance_distance_set)
    class_number = property(_ML.ClassDistance_class_number_get, _ML.ClassDistance_class_number_set)

    def __lt__(self, rhs):
        return _ML.ClassDistance___lt__(self, rhs)

    def __le__(self, rhs):
        return _ML.ClassDistance___le__(self, rhs)

    def __eq__(self, rhs):
        return _ML.ClassDistance___eq__(self, rhs)

    def __ne__(self, rhs):
        return _ML.ClassDistance___ne__(self, rhs)

    def __gt__(self, rhs):
        return _ML.ClassDistance___gt__(self, rhs)

    def __init__(self):
        _ML.ClassDistance_swiginit(self, _ML.new_ClassDistance())
    __swig_destroy__ = _ML.delete_ClassDistance

# Register ClassDistance in _ML:
_ML.ClassDistance_swigregister(ClassDistance)

class Element(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_ML.Element_x_get, _ML.Element_x_set)
    y = property(_ML.Element_y_get, _ML.Element_y_set)

    def __init__(self, *args):
        _ML.Element_swiginit(self, _ML.new_Element(*args))
    __swig_destroy__ = _ML.delete_Element

# Register Element in _ML:
_ML.Element_swigregister(Element)

class TrainElement(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    class_number = property(_ML.TrainElement_class_number_get, _ML.TrainElement_class_number_set)

    def __init__(self, *args):
        _ML.TrainElement_swiginit(self, _ML.new_TrainElement(*args))
    __swig_destroy__ = _ML.delete_TrainElement

# Register TrainElement in _ML:
_ML.TrainElement_swigregister(TrainElement)

class TestElement(Element):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ML.TestElement_swiginit(self, _ML.new_TestElement(*args))

    def EuclideDistance(self, *args):
        return _ML.TestElement_EuclideDistance(self, *args)
    __swig_destroy__ = _ML.delete_TestElement

# Register TestElement in _ML:
_ML.TestElement_swigregister(TestElement)


def classifyKnn(train_data, test_data, k, amount_of_classes):
    return _ML.classifyKnn(train_data, test_data, k, amount_of_classes)
class DoubleMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, m):
        _ML.DoubleMatrix_swiginit(self, _ML.new_DoubleMatrix(n, m))

    def __add__(self, matrix):
        return _ML.DoubleMatrix___add__(self, matrix)

    def __sub__(self, matrix):
        return _ML.DoubleMatrix___sub__(self, matrix)

    def __mul__(self, matrix):
        return _ML.DoubleMatrix___mul__(self, matrix)

    def __call__(self, i, j):
        return _ML.DoubleMatrix___call__(self, i, j)

    def clear(self):
        return _ML.DoubleMatrix_clear(self)

    def _print(self):
        return _ML.DoubleMatrix__print(self)
    __swig_destroy__ = _ML.delete_DoubleMatrix

# Register DoubleMatrix in _ML:
_ML.DoubleMatrix_swigregister(DoubleMatrix)

class BoolMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, m):
        _ML.BoolMatrix_swiginit(self, _ML.new_BoolMatrix(n, m))

    def __add__(self, matrix):
        return _ML.BoolMatrix___add__(self, matrix)

    def __sub__(self, matrix):
        return _ML.BoolMatrix___sub__(self, matrix)

    def __mul__(self, matrix):
        return _ML.BoolMatrix___mul__(self, matrix)

    def __call__(self, i, j):
        return _ML.BoolMatrix___call__(self, i, j)

    def clear(self):
        return _ML.BoolMatrix_clear(self)

    def _print(self):
        return _ML.BoolMatrix__print(self)
    __swig_destroy__ = _ML.delete_BoolMatrix

# Register BoolMatrix in _ML:
_ML.BoolMatrix_swigregister(BoolMatrix)



