# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ML
else:
    import _ML

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ML.delete_SwigPyIterator

    def value(self):
        return _ML.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ML.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ML.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ML.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ML.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ML.SwigPyIterator_copy(self)

    def next(self):
        return _ML.SwigPyIterator_next(self)

    def __next__(self):
        return _ML.SwigPyIterator___next__(self)

    def previous(self):
        return _ML.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ML.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ML.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ML.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ML.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ML.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ML.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ML.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ML:
_ML.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ML.SHARED_PTR_DISOWN
class IntDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.IntDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.IntDoubleMap___nonzero__(self)

    def __bool__(self):
        return _ML.IntDoubleMap___bool__(self)

    def __len__(self):
        return _ML.IntDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ML.IntDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _ML.IntDoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _ML.IntDoubleMap_has_key(self, key)

    def keys(self):
        return _ML.IntDoubleMap_keys(self)

    def values(self):
        return _ML.IntDoubleMap_values(self)

    def items(self):
        return _ML.IntDoubleMap_items(self)

    def __contains__(self, key):
        return _ML.IntDoubleMap___contains__(self, key)

    def key_iterator(self):
        return _ML.IntDoubleMap_key_iterator(self)

    def value_iterator(self):
        return _ML.IntDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _ML.IntDoubleMap___setitem__(self, *args)

    def asdict(self):
        return _ML.IntDoubleMap_asdict(self)

    def __init__(self, *args):
        _ML.IntDoubleMap_swiginit(self, _ML.new_IntDoubleMap(*args))

    def empty(self):
        return _ML.IntDoubleMap_empty(self)

    def size(self):
        return _ML.IntDoubleMap_size(self)

    def swap(self, v):
        return _ML.IntDoubleMap_swap(self, v)

    def begin(self):
        return _ML.IntDoubleMap_begin(self)

    def end(self):
        return _ML.IntDoubleMap_end(self)

    def rbegin(self):
        return _ML.IntDoubleMap_rbegin(self)

    def rend(self):
        return _ML.IntDoubleMap_rend(self)

    def clear(self):
        return _ML.IntDoubleMap_clear(self)

    def get_allocator(self):
        return _ML.IntDoubleMap_get_allocator(self)

    def count(self, x):
        return _ML.IntDoubleMap_count(self, x)

    def erase(self, *args):
        return _ML.IntDoubleMap_erase(self, *args)

    def find(self, x):
        return _ML.IntDoubleMap_find(self, x)

    def lower_bound(self, x):
        return _ML.IntDoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _ML.IntDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _ML.delete_IntDoubleMap

# Register IntDoubleMap in _ML:
_ML.IntDoubleMap_swigregister(IntDoubleMap)

class DoubleDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.DoubleDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.DoubleDoubleMap___nonzero__(self)

    def __bool__(self):
        return _ML.DoubleDoubleMap___bool__(self)

    def __len__(self):
        return _ML.DoubleDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ML.DoubleDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _ML.DoubleDoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _ML.DoubleDoubleMap_has_key(self, key)

    def keys(self):
        return _ML.DoubleDoubleMap_keys(self)

    def values(self):
        return _ML.DoubleDoubleMap_values(self)

    def items(self):
        return _ML.DoubleDoubleMap_items(self)

    def __contains__(self, key):
        return _ML.DoubleDoubleMap___contains__(self, key)

    def key_iterator(self):
        return _ML.DoubleDoubleMap_key_iterator(self)

    def value_iterator(self):
        return _ML.DoubleDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _ML.DoubleDoubleMap___setitem__(self, *args)

    def asdict(self):
        return _ML.DoubleDoubleMap_asdict(self)

    def __init__(self, *args):
        _ML.DoubleDoubleMap_swiginit(self, _ML.new_DoubleDoubleMap(*args))

    def empty(self):
        return _ML.DoubleDoubleMap_empty(self)

    def size(self):
        return _ML.DoubleDoubleMap_size(self)

    def swap(self, v):
        return _ML.DoubleDoubleMap_swap(self, v)

    def begin(self):
        return _ML.DoubleDoubleMap_begin(self)

    def end(self):
        return _ML.DoubleDoubleMap_end(self)

    def rbegin(self):
        return _ML.DoubleDoubleMap_rbegin(self)

    def rend(self):
        return _ML.DoubleDoubleMap_rend(self)

    def clear(self):
        return _ML.DoubleDoubleMap_clear(self)

    def get_allocator(self):
        return _ML.DoubleDoubleMap_get_allocator(self)

    def count(self, x):
        return _ML.DoubleDoubleMap_count(self, x)

    def erase(self, *args):
        return _ML.DoubleDoubleMap_erase(self, *args)

    def find(self, x):
        return _ML.DoubleDoubleMap_find(self, x)

    def lower_bound(self, x):
        return _ML.DoubleDoubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _ML.DoubleDoubleMap_upper_bound(self, x)
    __swig_destroy__ = _ML.delete_DoubleDoubleMap

# Register DoubleDoubleMap in _ML:
_ML.DoubleDoubleMap_swigregister(DoubleDoubleMap)

class MapVectorDoubleDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.MapVectorDoubleDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.MapVectorDoubleDouble___nonzero__(self)

    def __bool__(self):
        return _ML.MapVectorDoubleDouble___bool__(self)

    def __len__(self):
        return _ML.MapVectorDoubleDouble___len__(self)

    def __getslice__(self, i, j):
        return _ML.MapVectorDoubleDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.MapVectorDoubleDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.MapVectorDoubleDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.MapVectorDoubleDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.MapVectorDoubleDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.MapVectorDoubleDouble___setitem__(self, *args)

    def pop(self):
        return _ML.MapVectorDoubleDouble_pop(self)

    def append(self, x):
        return _ML.MapVectorDoubleDouble_append(self, x)

    def empty(self):
        return _ML.MapVectorDoubleDouble_empty(self)

    def size(self):
        return _ML.MapVectorDoubleDouble_size(self)

    def swap(self, v):
        return _ML.MapVectorDoubleDouble_swap(self, v)

    def begin(self):
        return _ML.MapVectorDoubleDouble_begin(self)

    def end(self):
        return _ML.MapVectorDoubleDouble_end(self)

    def rbegin(self):
        return _ML.MapVectorDoubleDouble_rbegin(self)

    def rend(self):
        return _ML.MapVectorDoubleDouble_rend(self)

    def clear(self):
        return _ML.MapVectorDoubleDouble_clear(self)

    def get_allocator(self):
        return _ML.MapVectorDoubleDouble_get_allocator(self)

    def pop_back(self):
        return _ML.MapVectorDoubleDouble_pop_back(self)

    def erase(self, *args):
        return _ML.MapVectorDoubleDouble_erase(self, *args)

    def __init__(self, *args):
        _ML.MapVectorDoubleDouble_swiginit(self, _ML.new_MapVectorDoubleDouble(*args))

    def push_back(self, x):
        return _ML.MapVectorDoubleDouble_push_back(self, x)

    def front(self):
        return _ML.MapVectorDoubleDouble_front(self)

    def back(self):
        return _ML.MapVectorDoubleDouble_back(self)

    def assign(self, n, x):
        return _ML.MapVectorDoubleDouble_assign(self, n, x)

    def resize(self, *args):
        return _ML.MapVectorDoubleDouble_resize(self, *args)

    def insert(self, *args):
        return _ML.MapVectorDoubleDouble_insert(self, *args)

    def reserve(self, n):
        return _ML.MapVectorDoubleDouble_reserve(self, n)

    def capacity(self):
        return _ML.MapVectorDoubleDouble_capacity(self)
    __swig_destroy__ = _ML.delete_MapVectorDoubleDouble

# Register MapVectorDoubleDouble in _ML:
_ML.MapVectorDoubleDouble_swigregister(MapVectorDoubleDouble)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _ML.DoubleVector___bool__(self)

    def __len__(self):
        return _ML.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _ML.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _ML.DoubleVector_pop(self)

    def append(self, x):
        return _ML.DoubleVector_append(self, x)

    def empty(self):
        return _ML.DoubleVector_empty(self)

    def size(self):
        return _ML.DoubleVector_size(self)

    def swap(self, v):
        return _ML.DoubleVector_swap(self, v)

    def begin(self):
        return _ML.DoubleVector_begin(self)

    def end(self):
        return _ML.DoubleVector_end(self)

    def rbegin(self):
        return _ML.DoubleVector_rbegin(self)

    def rend(self):
        return _ML.DoubleVector_rend(self)

    def clear(self):
        return _ML.DoubleVector_clear(self)

    def get_allocator(self):
        return _ML.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _ML.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _ML.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _ML.DoubleVector_swiginit(self, _ML.new_DoubleVector(*args))

    def push_back(self, x):
        return _ML.DoubleVector_push_back(self, x)

    def front(self):
        return _ML.DoubleVector_front(self)

    def back(self):
        return _ML.DoubleVector_back(self)

    def assign(self, n, x):
        return _ML.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _ML.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _ML.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _ML.DoubleVector_reserve(self, n)

    def capacity(self):
        return _ML.DoubleVector_capacity(self)
    __swig_destroy__ = _ML.delete_DoubleVector

# Register DoubleVector in _ML:
_ML.DoubleVector_swigregister(DoubleVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.IntVector___nonzero__(self)

    def __bool__(self):
        return _ML.IntVector___bool__(self)

    def __len__(self):
        return _ML.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _ML.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.IntVector___setitem__(self, *args)

    def pop(self):
        return _ML.IntVector_pop(self)

    def append(self, x):
        return _ML.IntVector_append(self, x)

    def empty(self):
        return _ML.IntVector_empty(self)

    def size(self):
        return _ML.IntVector_size(self)

    def swap(self, v):
        return _ML.IntVector_swap(self, v)

    def begin(self):
        return _ML.IntVector_begin(self)

    def end(self):
        return _ML.IntVector_end(self)

    def rbegin(self):
        return _ML.IntVector_rbegin(self)

    def rend(self):
        return _ML.IntVector_rend(self)

    def clear(self):
        return _ML.IntVector_clear(self)

    def get_allocator(self):
        return _ML.IntVector_get_allocator(self)

    def pop_back(self):
        return _ML.IntVector_pop_back(self)

    def erase(self, *args):
        return _ML.IntVector_erase(self, *args)

    def __init__(self, *args):
        _ML.IntVector_swiginit(self, _ML.new_IntVector(*args))

    def push_back(self, x):
        return _ML.IntVector_push_back(self, x)

    def front(self):
        return _ML.IntVector_front(self)

    def back(self):
        return _ML.IntVector_back(self)

    def assign(self, n, x):
        return _ML.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _ML.IntVector_resize(self, *args)

    def insert(self, *args):
        return _ML.IntVector_insert(self, *args)

    def reserve(self, n):
        return _ML.IntVector_reserve(self, n)

    def capacity(self):
        return _ML.IntVector_capacity(self)
    __swig_destroy__ = _ML.delete_IntVector

# Register IntVector in _ML:
_ML.IntVector_swigregister(IntVector)

class ShrdPtrToDoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ML.ShrdPtrToDoubleVector_swiginit(self, _ML.new_ShrdPtrToDoubleVector())
    __swig_destroy__ = _ML.delete_ShrdPtrToDoubleVector

# Register ShrdPtrToDoubleVector in _ML:
_ML.ShrdPtrToDoubleVector_swigregister(ShrdPtrToDoubleVector)

class NativeMatrixPy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.NativeMatrixPy_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.NativeMatrixPy___nonzero__(self)

    def __bool__(self):
        return _ML.NativeMatrixPy___bool__(self)

    def __len__(self):
        return _ML.NativeMatrixPy___len__(self)

    def __getslice__(self, i, j):
        return _ML.NativeMatrixPy___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.NativeMatrixPy___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.NativeMatrixPy___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.NativeMatrixPy___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.NativeMatrixPy___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.NativeMatrixPy___setitem__(self, *args)

    def pop(self):
        return _ML.NativeMatrixPy_pop(self)

    def append(self, x):
        return _ML.NativeMatrixPy_append(self, x)

    def empty(self):
        return _ML.NativeMatrixPy_empty(self)

    def size(self):
        return _ML.NativeMatrixPy_size(self)

    def swap(self, v):
        return _ML.NativeMatrixPy_swap(self, v)

    def begin(self):
        return _ML.NativeMatrixPy_begin(self)

    def end(self):
        return _ML.NativeMatrixPy_end(self)

    def rbegin(self):
        return _ML.NativeMatrixPy_rbegin(self)

    def rend(self):
        return _ML.NativeMatrixPy_rend(self)

    def clear(self):
        return _ML.NativeMatrixPy_clear(self)

    def get_allocator(self):
        return _ML.NativeMatrixPy_get_allocator(self)

    def pop_back(self):
        return _ML.NativeMatrixPy_pop_back(self)

    def erase(self, *args):
        return _ML.NativeMatrixPy_erase(self, *args)

    def __init__(self, *args):
        _ML.NativeMatrixPy_swiginit(self, _ML.new_NativeMatrixPy(*args))

    def push_back(self, x):
        return _ML.NativeMatrixPy_push_back(self, x)

    def front(self):
        return _ML.NativeMatrixPy_front(self)

    def back(self):
        return _ML.NativeMatrixPy_back(self)

    def assign(self, n, x):
        return _ML.NativeMatrixPy_assign(self, n, x)

    def resize(self, *args):
        return _ML.NativeMatrixPy_resize(self, *args)

    def insert(self, *args):
        return _ML.NativeMatrixPy_insert(self, *args)

    def reserve(self, n):
        return _ML.NativeMatrixPy_reserve(self, n)

    def capacity(self):
        return _ML.NativeMatrixPy_capacity(self)
    __swig_destroy__ = _ML.delete_NativeMatrixPy

# Register NativeMatrixPy in _ML:
_ML.NativeMatrixPy_swigregister(NativeMatrixPy)

class NativeMatrixForIndexPy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.NativeMatrixForIndexPy_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.NativeMatrixForIndexPy___nonzero__(self)

    def __bool__(self):
        return _ML.NativeMatrixForIndexPy___bool__(self)

    def __len__(self):
        return _ML.NativeMatrixForIndexPy___len__(self)

    def __getslice__(self, i, j):
        return _ML.NativeMatrixForIndexPy___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.NativeMatrixForIndexPy___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.NativeMatrixForIndexPy___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.NativeMatrixForIndexPy___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.NativeMatrixForIndexPy___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.NativeMatrixForIndexPy___setitem__(self, *args)

    def pop(self):
        return _ML.NativeMatrixForIndexPy_pop(self)

    def append(self, x):
        return _ML.NativeMatrixForIndexPy_append(self, x)

    def empty(self):
        return _ML.NativeMatrixForIndexPy_empty(self)

    def size(self):
        return _ML.NativeMatrixForIndexPy_size(self)

    def swap(self, v):
        return _ML.NativeMatrixForIndexPy_swap(self, v)

    def begin(self):
        return _ML.NativeMatrixForIndexPy_begin(self)

    def end(self):
        return _ML.NativeMatrixForIndexPy_end(self)

    def rbegin(self):
        return _ML.NativeMatrixForIndexPy_rbegin(self)

    def rend(self):
        return _ML.NativeMatrixForIndexPy_rend(self)

    def clear(self):
        return _ML.NativeMatrixForIndexPy_clear(self)

    def get_allocator(self):
        return _ML.NativeMatrixForIndexPy_get_allocator(self)

    def pop_back(self):
        return _ML.NativeMatrixForIndexPy_pop_back(self)

    def erase(self, *args):
        return _ML.NativeMatrixForIndexPy_erase(self, *args)

    def __init__(self, *args):
        _ML.NativeMatrixForIndexPy_swiginit(self, _ML.new_NativeMatrixForIndexPy(*args))

    def push_back(self, x):
        return _ML.NativeMatrixForIndexPy_push_back(self, x)

    def front(self):
        return _ML.NativeMatrixForIndexPy_front(self)

    def back(self):
        return _ML.NativeMatrixForIndexPy_back(self)

    def assign(self, n, x):
        return _ML.NativeMatrixForIndexPy_assign(self, n, x)

    def resize(self, *args):
        return _ML.NativeMatrixForIndexPy_resize(self, *args)

    def insert(self, *args):
        return _ML.NativeMatrixForIndexPy_insert(self, *args)

    def reserve(self, n):
        return _ML.NativeMatrixForIndexPy_reserve(self, n)

    def capacity(self):
        return _ML.NativeMatrixForIndexPy_capacity(self)
    __swig_destroy__ = _ML.delete_NativeMatrixForIndexPy

# Register NativeMatrixForIndexPy in _ML:
_ML.NativeMatrixForIndexPy_swigregister(NativeMatrixForIndexPy)

class TensorProb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ML.TensorProb_swiginit(self, _ML.new_TensorProb())
    __swig_destroy__ = _ML.delete_TensorProb

# Register TensorProb in _ML:
_ML.TensorProb_swigregister(TensorProb)

class MapVectorIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ML.MapVectorIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ML.MapVectorIntDouble___nonzero__(self)

    def __bool__(self):
        return _ML.MapVectorIntDouble___bool__(self)

    def __len__(self):
        return _ML.MapVectorIntDouble___len__(self)

    def __getslice__(self, i, j):
        return _ML.MapVectorIntDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ML.MapVectorIntDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ML.MapVectorIntDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ML.MapVectorIntDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ML.MapVectorIntDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ML.MapVectorIntDouble___setitem__(self, *args)

    def pop(self):
        return _ML.MapVectorIntDouble_pop(self)

    def append(self, x):
        return _ML.MapVectorIntDouble_append(self, x)

    def empty(self):
        return _ML.MapVectorIntDouble_empty(self)

    def size(self):
        return _ML.MapVectorIntDouble_size(self)

    def swap(self, v):
        return _ML.MapVectorIntDouble_swap(self, v)

    def begin(self):
        return _ML.MapVectorIntDouble_begin(self)

    def end(self):
        return _ML.MapVectorIntDouble_end(self)

    def rbegin(self):
        return _ML.MapVectorIntDouble_rbegin(self)

    def rend(self):
        return _ML.MapVectorIntDouble_rend(self)

    def clear(self):
        return _ML.MapVectorIntDouble_clear(self)

    def get_allocator(self):
        return _ML.MapVectorIntDouble_get_allocator(self)

    def pop_back(self):
        return _ML.MapVectorIntDouble_pop_back(self)

    def erase(self, *args):
        return _ML.MapVectorIntDouble_erase(self, *args)

    def __init__(self, *args):
        _ML.MapVectorIntDouble_swiginit(self, _ML.new_MapVectorIntDouble(*args))

    def push_back(self, x):
        return _ML.MapVectorIntDouble_push_back(self, x)

    def front(self):
        return _ML.MapVectorIntDouble_front(self)

    def back(self):
        return _ML.MapVectorIntDouble_back(self)

    def assign(self, n, x):
        return _ML.MapVectorIntDouble_assign(self, n, x)

    def resize(self, *args):
        return _ML.MapVectorIntDouble_resize(self, *args)

    def insert(self, *args):
        return _ML.MapVectorIntDouble_insert(self, *args)

    def reserve(self, n):
        return _ML.MapVectorIntDouble_reserve(self, n)

    def capacity(self):
        return _ML.MapVectorIntDouble_capacity(self)
    __swig_destroy__ = _ML.delete_MapVectorIntDouble

# Register MapVectorIntDouble in _ML:
_ML.MapVectorIntDouble_swigregister(MapVectorIntDouble)

class ReturnedMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ML.ReturnedMatrix_swiginit(self, _ML.new_ReturnedMatrix(*args))
    first = property(_ML.ReturnedMatrix_first_get, _ML.ReturnedMatrix_first_set)
    second = property(_ML.ReturnedMatrix_second_get, _ML.ReturnedMatrix_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _ML.delete_ReturnedMatrix

# Register ReturnedMatrix in _ML:
_ML.ReturnedMatrix_swigregister(ReturnedMatrix)

MetricType_kOverlap = _ML.MetricType_kOverlap
MetricType_kFlattenedOverlap = _ML.MetricType_kFlattenedOverlap
MetricType_kLogOverlap = _ML.MetricType_kLogOverlap
class Overlap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ML.Overlap_swiginit(self, _ML.new_Overlap())
    __swig_destroy__ = _ML.delete_Overlap

# Register Overlap in _ML:
_ML.Overlap_swigregister(Overlap)

class FlattenedOverlap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ML.FlattenedOverlap_swiginit(self, _ML.new_FlattenedOverlap())
    __swig_destroy__ = _ML.delete_FlattenedOverlap

# Register FlattenedOverlap in _ML:
_ML.FlattenedOverlap_swigregister(FlattenedOverlap)

class kLogOverlap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ML.kLogOverlap_swiginit(self, _ML.new_kLogOverlap())
    __swig_destroy__ = _ML.delete_kLogOverlap

# Register kLogOverlap in _ML:
_ML.kLogOverlap_swigregister(kLogOverlap)

OperandType_kX = _ML.OperandType_kX
OperandType_kZ = _ML.OperandType_kZ
class NearestNeighbours(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kPoolSize = _ML.NearestNeighbours_kPoolSize

    def __init__(self, n_neighbours, metric_type):
        _ML.NearestNeighbours_swiginit(self, _ML.new_NearestNeighbours(n_neighbours, metric_type))

    def fit(self, X, Y, amount_of_features):
        return _ML.NearestNeighbours_fit(self, X, Y, amount_of_features)

    def kneighbors(self, *args):
        return _ML.NearestNeighbours_kneighbors(self, *args)
    __swig_destroy__ = _ML.delete_NearestNeighbours

# Register NearestNeighbours in _ML:
_ML.NearestNeighbours_swigregister(NearestNeighbours)


def get_mtl_matrix(v_matrix_const, m, n):
    return _ML.get_mtl_matrix(v_matrix_const, m, n)


